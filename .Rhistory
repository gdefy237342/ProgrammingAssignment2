demo()
demo(graphics)
install.packages("mgcv")
install.package("swirl")
install.packageS("swirl")
install.packages("swirl")
library("swirl")
swirl()
search
search()
y <- 10
f <- function(x) {}
f <- function(x) {
y <- 2 y^2 + g(x)}
y
f
f <- function(x) {y<-2 y^2 + g(x)}
swirl
swirl()
cube <- function(x, n) {x^3}
cube(3)
x <- 1:10
if(x > 5) { x<-0}
f <- function(x) {}
f <- function(x) {
g <- function(y) {
y + z }
z <- 4
x + g(x)
}
z <- 10
f(3)
x<-5
y <- if(x<3) { NA } else {10}
y
install.packages("swirl")
library(swirl)
swirl()
getwd()
ls()
X <- 9
x <- 9
play()
ls()
nxt()
ls
list.files()
help(list.files)
?list.files
args(list.files)
old.dir < getwd()
old.dir <- getwd()
dir.create("testdir")
ser
setwd("testdir")
file.create("mytest.R")
R
ls()
list.files()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
play()
args("mytest3.R")
file.info("mytest3.R")
file.path("mytest3.R)
d
d
}
}
}
""
""
nxt()
mytest3.R
file.path("mytest3.R")
create.dir("testdir2/testdir3")
dir.create("testdir2/testdir3")
dir.create("testdir2/testdir3", recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive=TRUE)
old.dir
setwd(old.dir)
unlink("testdir", recursive=TRUE)
ls()
install.packages("swirl")
library(swirl)
swirl()
1:20
pi:10
15:1
?':'
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect = c(0.5, 55, -10, 6)
num_vect <= c( 0.5, 55, -10, 6)
num_vect <= c(0.5, 55, -10, 6)
info()
?c
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(mychar, "guy")
my_name <- c(my_char, "guy")
my_name
paste (my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste (1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep (NA, 1000)
y_data <- sample(c(y, z), 100)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
bye()
q()
getwd()
getwd()
install.packages(c("boot", "foreign", "manipulate", "MASS", "nlme"))
getwd()
library(datsets)
library(datasets)
data(iris)
?iris
object
obj
ls
ls()
head(iris)
test <- lapply(iris, function(elt) elt[,$Species="setosa"])
test <- lapply(iris, function(elt) elt[,Species="setosa"])
s <- split(iris, iris$Species)
s
lapply(s, function(x) colMeans(x[, c("Sepal.Length)]))
""
""
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[, c("Sepal.Length","Species")]))
s
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width"]))
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
colMeans(iris)
appl(iris[, 1:4], 1, mean)
appyl(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 1, mean)
head(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
head(Mtcars)
head(mtcars)
mtcars
apply(mtcars, 2, mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars[, 1:4], 2, mean)
debug(ls)
ls()
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern)
{
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
name <- deparse(name)
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
all.names <- .Internal(ls(envir, all.names))
if (!missing(pattern)) {
if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
ll != length(grep("]", pattern, fixed = TRUE))) {
if (pattern == "[") {
pattern <- "\\["
warning("replaced regular expression pattern '[' by  '\\\\['")
}
else if (length(grep("[^\\\\]\\[<-", pattern))) {
pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
}
}
grep(pattern, all.names, value = TRUE)
}
else all.names
}
head(mtcars)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
head(mtcars)
s <- split(mtcars, mtcars$cyl)
bye()
library(datasets)
data(mtcars)
head(mtcars)
s <- split(mtcars, mtcars$cyl)
s
lapply(s, function(x) colMeans(x[, c("mpg")]))
lapply(s, function(x) colMeans(x[, c("mpg","disp")]))
y<- lapply(s, function(x) colMeans(x[, c("mpg","disp")]))
y
y<- lapply(s, function(x) colMeans(x[, c("mpg","hp")]))
y
y[1,]
y
y
y[1,]
mtcars
test <- apply(mtcars, 2, mean)
test
s
s$'8'
abs(s$4 - s$8)
s$4
abs(s$'4' - s$'8')
y
y$'4'
y$'4'[,2]
yS'4'$hp
y$'4'$hp
y$'4'[$hp]
y$4
abs(y$'4'-y$'8')
install.packages("swirl")
library(swirl)
swirl
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(3,5,7)
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names()
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
emptyenv()
ls()
?environment
environment
environment(vect)
environment(cube)
setwd("~/Coursera/Assignment2/ProgrammingAssignment2")
source("cachematrixstepbystep.R")
?matrix
matrix( 2,2,2,2, nrow = 2)
matrix(c(2,2,2,2), nrow=2)
x <-matrix(c(2,2,2,2), nrow=2)
mat <- makeCacheMatrix(x)
mat$getinverse()
m <- solve(x)
mat
